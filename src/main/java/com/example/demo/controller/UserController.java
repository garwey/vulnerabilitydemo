package com.example.demo.controller;

import com.example.demo.entity.User;
import com.example.demo.service.UserService;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.List;

@Controller
public class UserController {
    @Autowired
    private UserService userService;

    PrintStream ps = new PrintStream("log.txt");

    int counter = 0;

    private static Logger logger = Logger.getLogger(UserController.class);

    public UserController() throws FileNotFoundException {
    }

    @GetMapping(value = "/user/getAll")
    @ResponseBody
    public List<User> getAll() {
        return userService.findAll();
    }

    @GetMapping(value = "/user/findone")
    @ResponseBody
    public User findone(@RequestParam(value = "id", required = false) String id) {
        counter++;
        ps.println(counter + ". request /user/findOne, parameter=" + id);
        User user = userService.findOne(id);
        int length = (counter + "").length() + 2;
        String str = "";
        for (int i = 0; i < length; i++) {
            str += " ";
        }
        ps.println(str + "response: " + user);
        return user;
    }
	
    @GetMapping(value = "/user")
    @ResponseBody
    public User getOne(@RequestParam(value = "id", required = false) String id) {
        counter++;
        ps.println(counter + ". request /user, parameter=" + id);
        User user = userService.getById(id);
        int length = (counter + "").length() + 2;
        String str = "";
        for (int i = 0; i < length; i++) {
            str += " ";
        }
        ps.println(str + "response: " + user);
        return user;
    }

    @GetMapping(value = "/user/getByUsername")
    @ResponseBody
    public User getByUsername(@RequestParam(value = "username") String username) {
		counter++;
        ps.println(counter + ". request /user/getByUsername, parameter=" + username);
        User user = userService.getByName(username).get(0);
		int length = (counter + "").length() + 2;
        String str = "";
        for (int i = 0; i < length; i++) {
            str += " ";
        }
        ps.println(str + "response: " + user);
        return user;
    }

    @GetMapping(value = "/user/getByIdUsername")
    @ResponseBody
    public User getByUsername(@RequestParam(value = "id") String id, @RequestParam(value = "username") String username) {
        counter++;
        ps.println(counter + ". request /user/getByIdUsername, parameter=" + id + " " + username);
        User user = userService.getByIdUsername(id, username);
        int length = (counter + "").length() + 2;
        String str = "";
        for (int i = 0; i < length; i++) {
            str += " ";
        }
        ps.println(str + "response: " + user);
        return user;
    }

    @GetMapping(value = "/user/create")
    @ResponseBody
    public String create(@RequestParam("username") String username, @RequestParam("password") String password,
                         @RequestParam(value = "name", required = false) String name) {
        if (userService.insertOne(new User(username, password, name)) == 1)
            return "succeed";
        return "failed";
    }
}
